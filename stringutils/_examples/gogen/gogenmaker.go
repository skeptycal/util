// Copyright 2021 Michael Treanor. All rights reserved.
// Use of this source code is governed the MIT License
// that can be found in the LICENSE file.

// Package gogen implements automation for Go code generation
// using go generate and templates.
//
// usage example:
//
// $ gogen maketests.go
//
// $ go run maketests.go -output benchmarks.go
//
package gogen

import (
	"fmt"
	"log"
	"strings"
	"time"
)

var defaultUserConfig = &UserConfig{
    Name: "Michael Treanor",
    Email: "skeptycal@gmail.com",
    Username: "skeptycal",
    DefaultLicense: "MIT",
    DefaultCopyrightYear: fmt.Sprintf("%d",time.Now().Year()),
}

const (
	fmtCopyrightHeader = `// Copyright (c) %s %s. All rights reserved.
// Use of this source code is governed the %s License
// that can be found in the LICENSE file.

`
	fmtCodeGenNotice = "// Code generated by go run %s -output %s; DO NOT EDIT.\n\n"

	fmtPackage       = "package %s"
	fmtMemo          = "// %s"
	fmtSectionCloser = "}\n\n"
	fmtFuncHeader    = "//%s is an automatically generated function.\nfunc %s (%s) %s {\n"
	fmtStructHeader  = "//%s is an automatically generated struct.\ntype %s struct {\n"
	fmtTableHeader   = "//%s is an automatically generated table.\nvar %s %s = %s{\n"
)

type UserConfig struct {
	Name                 string `default:"defaultUserConfig.Name"`
	Email                string `default:"defaultUserConfig.Email"`
	Username             string `default:"defaultUserConfig.Username"`
	DefaultLicense       string `default:"defaultUserConfig.DefaultLicense"`
	DefaultCopyrightYear string `default:"defaultUserConfig.DefaultCopyrightYear"`
}

func (c *UserConfig) String() string {
    sb := strings.Builder{}
    defer sb.Reset()
    sb.WriteString("User Config:\n")
    sb.WriteString("Name: " + c.Name + "\n")
    sb.WriteString("Email: " + c.Email + "\n")
    sb.WriteString("Username: " + c.Username + "\n")
    sb.WriteString("DefaultLicense: " + c.DefaultLicense + "\n")
    sb.WriteString("DefaultCopyrightYear: " + c.DefaultCopyrightYear + "\n")
    return sb.String()
}

type RepoConfig struct {
    User        *UserConfig
    name string
	license     string `default:""`
	year        string `default:""`
	url         string `default:""`
	downloadURL string `default:""`
	docURL      string `default:""`
}

func NewUserConfig(name, email, username, defaultLicense, defaultCopyrightYear string) *UserConfig {

    // if name == "" {
    //     name = defaultUserConfig.Name
    // }
    // if email == "" {
    //     email = defaultUserConfig.Email
    // }
    // if username == "" {
    //     username = defaultUserConfig.Username
    // }
    // if defaultLicense == "" {
    //     defaultLicense = defaultUserConfig.DefaultLicense
    // }
    // if defaultCopyrightYear == "" {
    //     defaultCopyrightYear = defaultUserConfig.DefaultCopyrightYear
    // }

    return &UserConfig{
        Name: name,
        Email: email,
        Username: username,
        DefaultLicense: defaultLicense,
        DefaultCopyrightYear: defaultCopyrightYear
    }
}

func NewRepoConfig( reponame string, user *UserConfig) (rc *RepoConfig) {
	if user == nil {
		user = defaultUserConfig
	}
	if reponame == "" {
		log.Fatal("a repo name is required")
    }

	rc = &RepoConfig{
        User: user,
        name: reponame,
	}

    return
}

func (r *RepoConfig) DownloadURL() string {
	if r.Name == "" {
		log.Fatalf("a valid repo name is required")
	}
	return fmt.Sprintf("https://github.com/%s/%s", r.Username, r.Name)
}

func (r *RepoConfig) DocURL() string {
	if r.Name == "" {
		log.Fatalf("a valid repo name is required")
	}
	if r.docURL == "" {
		r.docURL = fmt.Sprintf("https://github.com/%s/%s/docs", r.Username, r.Name)
	}
	return r.docURL
}

func (r *RepoConfig) URL() string {
	if r.Name == "" {
		log.Fatalf("a valid repo name is required")
	}
	if r.url == "" {
		r.url = fmt.Sprintf("https://%s.github.io/%s", r.User.Username, r.name)
	}
	return r.url
}

func genPageTemplate() string {
	sb := strings.Builder{}
	sb.WriteString(genCopyrightHeader(year, author, license))
	return ""
}

func genCopyrightHeader(year, author, license string) string {
	return fmt.Sprintf(fmtCopyrightHeader, year, author, license)
}

func genPackage(reponame string) string {
	return fmt.Sprintf(fmtPackage, reponame)
}

func genMemo(memo string) string {
	return fmt.Sprintf(fmtMemo, memo)
}

func genClose() string { return fmtSectionCloser }

func genFuncHeader(name, args, retvals string) string {
	return fmt.Sprintf(fmtFuncHeader, name, name, args, retvals)
}

func genStructHeader(name string) string {
	return fmt.Sprintf(fmtStructHeader, name, name)
}

func genTableHeader(name, vartype, value string) string {
	return fmt.Sprintf(fmtTable, name, name, vartype, value)
}
