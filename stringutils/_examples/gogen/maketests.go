// Copyright 2021 Michael Treanor. All rights reserved.
// Use of this source code is governed the MIT License
// that can be found in the LICENSE file.

// +build ignore

//
// usage:
//
// go run maketests.go -output trig.go
//

package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
)

var filename = flag.String("output", "trig.go", "output file name")


func main() {
	flag.Parse()

	var buf bytes.Buffer

	fmt.Fprintf(&buf, `// Copyright 2021 Michael Treanor. All rights reserved.
// Use of this source code is governed the MIT License
// that can be found in the LICENSE file.`+"\n\n")
	fmt.Fprintf(&buf, "// Code generated by go run maketests.go -output benchmarks.go; DO NOT EDIT.\n\n")
	fmt.Fprintf(&buf, "package stringutils\n\n")

	fmt.Fprintf(&buf, "// (%d+%d+%d)*2 + (%d)*4 = %d bytes\n\n",
		len(range16), len(except16), len(except32),
		len(range32),
		(len(range16)+len(except16)+len(except32))*2+
			(len(range32))*4)

	fmt.Fprintf(&buf, "var isPrint16 = []uint16{\n")
	for i := 0; i < len(range16); i += 2 {
		fmt.Fprintf(&buf, "\t%#04x, %#04x,\n", range16[i], range16[i+1])
	}
	fmt.Fprintf(&buf, "}\n\n")

	data, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	err = ioutil.WriteFile(*filename, data, 0644)
	if err != nil {
		log.Fatal(err)
	}
}
