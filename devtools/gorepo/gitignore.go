package gorepo

import (
	"fmt"
	"os"
	"reflect"
	"strings"

	log "github.com/sirupsen/logrus"
	"github.com/skeptycal/util/gofile"
	"github.com/skeptycal/util/webtools/http"
)

func returnCheck(f func()) ([]interface{}, error) {
	foo := reflect.TypeOf(f)

	fmt.Printf("f is type: %v", foo)
	return nil, nil
}

func createGitIgnore(force bool) error {

	if gofile.Exists(".gitignore") {
		if !force {
			return fmt.Errorf(".gitignore already exists; use force option to overwrite")
		}
	}

	f, err := os.Create(".gitignore")
	if err != nil {
		return err
	}

    log.Infof("Creating gitignore file %v", f.Name())

    _, err := f.WriteString()

	return nil
}

// gitignoreAPIList returns a list of available gitignore file languages parameters
func gitIgnoreAPIList() []string {
	// https://www.toptal.com/developers/gitignore/api/list

	body, err := http.GetPage(urlGitIgnoreAPIList)
	if err != nil {
		log.Error(err)
		return make([]string, 0)
	}

	list := strings.Split(string(body), " ")
	return list
}

// gitIgnoreAPI returns a string response from the www.gitignore.io API containing
// standard .gitignore items for the args given.
//
//      default: "macos linux windows ssh vscode go zsh node vue nuxt python django"
//
// using: https://www.toptal.com/developers/gitignore/api/macos,linux,windows,ssh,vscode,go,zsh,node,vue,nuxt,python,django
func gitIgnoreAPI(args string) string {

	if len(args) == 0 {
		args = defaultGitIgnoreItemsComma
	}

	url := urlGitIgnoreAPIPrefix + args

	body, err := http.GetPage(url)
	if err != nil {
		log.Error(err)
		return ""
	}
	return body
}

// GitIgnore writes a .gitignore file, including default items followed by the response from
// the www.gitignore.io API containing standard .gitignore items for the args given.
//
//      default: "macos linux windows ssh vscode go zsh node vue nuxt python django"
//
// using: https://www.toptal.com/developers/gitignore/api/macos,linux,windows,ssh,vscode,go,zsh,node,vue,nuxt,python,django
func GitIgnore(reponame, personalItems, repoSpecific, args string) error {
	if args == "" {
		args = defaultGitIgnoreItemsSpace
	}

	if personalItems == "" {
		personalItems = personalPreferenceItems
    }

    if repoSpecific == "" {
        repoSpecific == repoSpecificItems
    }

	var sb strings.Builder
	defer sb.Reset()

	gifmt := fmt.Sprintf(giFormatString, reponame, gitIgnoreAPI(args))

	sb.WriteString(gifmt)

	return gofile.WriteFile(".gitignore", sb.String())
}

const ( // for gitignore.go

	// defaultGitignoreItems is a list of personal prefernces to download from the www.gitignore.io API
	defaultGitIgnoreItemsComma = `macos,linux,windows,ssh,vscode,go,zsh,node,vue,nuxt,python,django`
	defaultGitIgnoreItemsSpace = "macos linux windows ssh vscode go zsh node vue nuxt python django"
	urlGitIgnoreAPIList        = `https://www.toptal.com/developers/gitignore/api/list`
	urlGitIgnoreAPIPrefix      = `https://www.toptal.com/developers/gitignore/api/%s`

	// personalPreferenceItems is a list of personal
	// preferences in addition to the www.gitignore.io API
	personalPreferenceItems = `ideas
notes.md
`
	// repoSpecificItems is a list of rare or unusual
	// items that apply to this repository only.
	repoSpecificItems = `# used by go.test.sh
coverage.txt
profile.out
`

	// Template used for .gitignore file. There are three variables. They are, in order:
	// 1. repo name
	// 2. personal preference items
	// 3. automated gitignore.io items
	giFormatString = `# %s .gitignore file

# --> This file is automatically generated <--

# Repo Specific Items:
%s

# Personal Preference Items
%s

# generic secure items
*ssh*
*_rsa*
*token
*[Pp]rivate*
*[Ss]ecret*
*[Tt]oken*

# generic items
**/*/node_modules/
*[Bb]ak
*temp
**/*/[Bb]ak/
temp/
*history*
*hst*

# .gitignore contents from gitignore.io API
%s

`
)
